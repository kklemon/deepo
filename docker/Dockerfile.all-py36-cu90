# ==================================================================
# module list
# ------------------------------------------------------------------
# darknet       latest (git)
# python        3.6    (apt)
# torch         latest (git)
# chainer       latest (pip)
# mxnet         latest (pip)
# onnx          latest (pip)
# pytorch       latest (pip)
# tensorflow    latest (pip)
# theano        latest (git)
# keras         latest (pip)
# lasagne       latest (git)
# opencv        3.4.3  (git)
# sonnet        latest (pip)
# caffe         latest (git)
# caffe2        latest (git)
# cntk          latest (pip)
# ==================================================================

FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04
RUN APT_INSTALL="apt-get install -y --no-install-recommends"
RUN PIP_INSTALL="python -m pip --no-cache-dir install --upgrade"
RUN GIT_CLONE="git clone --depth 10"

RUN rm -rf /var/lib/apt/lists/* \
        /etc/apt/sources.list.d/cuda.list \
        /etc/apt/sources.list.d/nvidia-ml.list

RUN apt-get update

# ==================================================================
# tools
# ==================================================================

RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        build-essential \
        ca-certificates \
        cmake \
        wget \
        git \
        vim

# ==================================================================
# darknet
# ==================================================================

RUN $GIT_CLONE https://github.com/pjreddie/darknet.git ~/darknet
RUN cd ~/darknet
RUN sed -i 's/GPU=0/GPU=1/g' ~/darknet/Makefile
RUN sed -i 's/CUDNN=0/CUDNN=1/g' ~/darknet/Makefile
RUN make -j"$(nproc)"
RUN cp ~/darknet/include/* /usr/local/include
RUN cp ~/darknet/*.a /usr/local/lib
RUN cp ~/darknet/*.so /usr/local/lib
RUN cp ~/darknet/darknet /usr/local/bin

# ==================================================================
# python
# ==================================================================

RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        software-properties-common
RUN add-apt-repository ppa:deadsnakes/ppa
RUN apt-get update
RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        python3.6 \
        python3.6-dev
RUN wget -O ~/get-pip.py \
        https://bootstrap.pypa.io/get-pip.py
RUN python3.6 ~/get-pip.py
RUN ln -s /usr/bin/python3.6 /usr/local/bin/python3
RUN ln -s /usr/bin/python3.6 /usr/local/bin/python
RUN $PIP_INSTALL setuptools
RUN $PIP_INSTALL \
        numpy \
        scipy \
        pandas \
        cloudpickle \
        scikit-learn \
        matplotlib \
        Cython

# ==================================================================
# torch
# ==================================================================

RUN export TORCH_NVCC_FLAGS="-D__CUDA_NO_HALF_OPERATORS__"
RUN $GIT_CLONE https://github.com/torch/distro.git ~/torch --recursive
RUN cd ~/torch/exe/luajit-rocks
RUN mkdir build && cd build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D WITH_LUAJIT21=ON \
          ..
RUN make -j"$(nproc)" install
RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        libjpeg-dev \
        libpng-dev \
        libreadline-dev
RUN $GIT_CLONE https://github.com/Yonaba/Moses ~/moses
RUN cd ~/moses
RUN luarocks install rockspec/moses-1.6.1-1.rockspec

RUN cd ~/torch
RUN sed - i 's/extra\/cudnn/extra\/cudnn \&\& git checkout R7/' install.sh
RUN sed -i 's/$PREFIX\/bin\/luarocks/luarocks/' install.sh && \
    sed -i '/qt/d' install.sh && \
    sed -i '/Installing Lua/,/^cd \.\.$/d' install.sh && \
    sed -i '/path_to_nvidiasmi/,/^fi$/d' install.sh && \
    sed -i '/Restore anaconda/,/^Not updating$/d' install.sh && \
    sed -i '/You might want to/,/^fi$/d' install.sh

RUN yes no | ./install.sh

# ==================================================================
# boost
# ==================================================================

RUN wget -O ~/boost.tar.gz https://dl.bintray.com/boostorg/release/1.65.1/source/boost_1_65_1.tar.gz
RUN tar -zxf ~/boost.tar.gz -C ~
RUN cd ~/boost_*
RUN ./bootstrap.sh --with-python=python3.6
RUN ./b2 install --prefix=/usr/local

# ==================================================================
# chainer
# ==================================================================

RUN $PIP_INSTALL \
        cupy \
        chainer

# ==================================================================
# mxnet
# ==================================================================

RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        libatlas-base-dev \
        graphviz
RUN $PIP_INSTALL \
        mxnet-cu90 \
        graphviz

# ==================================================================
# onnx
# ==================================================================

RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        protobuf-compiler \
        libprotoc-dev

RUN $PIP_INSTALL onnx

# ==================================================================
# pytorch
# ==================================================================

RUN $PIP_INSTALL \
        torch_nightly -f \
        https://download.pytorch.org/whl/nightly/cu90/torch_nightly.html

# ==================================================================
# tensorflow
# ==================================================================

RUN $PIP_INSTALL tensorflow-gpu

# ==================================================================
# theano
# ==================================================================

RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        libblas-dev
RUN wget -qO- https://github.com/Theano/libgpuarray/archive/v0.7.6.tar.gz | tar xz -C ~
RUN cd ~/libgpuarray* && mkdir -p build && cd build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          ..
RUN make -j"$(nproc)" install
RUN cd ~/libgpuarray*
RUN python setup.py build
RUN python setup.py install
RUN printf '[global]\nfloatX = float32\ndevice = cuda0\n\n[dnn]\ninclude_path = /usr/local/cuda/targets/x86_64-linux/include\n' > ~/.theanorc

RUN $PIP_INSTALL
        https://github.com/Theano/Theano/archive/master.zip

# ==================================================================
# keras
# ==================================================================

RUN $PIP_INSTALL
        h5py
        keras

# ==================================================================
# lasagne
# ==================================================================

RUN $GIT_CLONE https://github.com/Lasagne/Lasagne ~/lasagne
RUN cd ~/lasagne
RUN $PIP_INSTALL .

# ==================================================================
# opencv
# ==================================================================

RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        libatlas-base-dev \
        libgflags-dev \
        libgoogle-glog-dev \
        libhdf5-serial-dev \
        libleveldb-dev \
        liblmdb-dev \
        libprotobuf-dev \
        libsnappy-dev \
        protobuf-compiler

RUN $GIT_CLONE --branch 3.4.3 https://github.com/opencv/opencv ~/opencv
RUN mkdir -p ~/opencv/build
RUN cd ~/opencv/build

RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D WITH_IPP=OFF \
          -D WITH_CUDA=OFF \
          -D WITH_OPENCL=OFF \
          -D BUILD_TESTS=OFF \
          -D BUILD_PERF_TESTS=OFF \
          ..
RUN make -j"$(nproc)" install

# ==================================================================
# sonnet
# ==================================================================

RUN $PIP_INSTALL dm-sonnet

# ==================================================================
# caffe
# ==================================================================

RUN $GIT_CLONE https://github.com/BVLC/caffe ~/caffe
RUN cp ~/caffe/Makefile.config.example ~/caffe/Makefile.config
RUN sed -i 's/# USE_CUDNN/USE_CUDNN/g' ~/caffe/Makefile.config
RUN sed -i 's/# PYTHON_LIBRARIES/PYTHON_LIBRARIES/g' ~/caffe/Makefile.config
RUN sed -i 's/# WITH_PYTHON_LAYER/WITH_PYTHON_LAYER/g' ~/caffe/Makefile.config
RUN sed -i 's/# OPENCV_VERSION/OPENCV_VERSION/g' ~/caffe/Makefile.config
RUN sed -i 's/# USE_NCCL/USE_NCCL/g' ~/caffe/Makefile.config
RUN sed -i 's/-gencode arch=compute_20,code=sm_20//g' ~/caffe/Makefile.config
RUN sed -i 's/-gencode arch=compute_20,code=sm_21//g' ~/caffe/Makefile.config
RUN sed -i 's/2\.7/3\.6/g' ~/caffe/Makefile.config
RUN sed -i 's/3\.5/3\.6/g' ~/caffe/Makefile.config
RUN sed -i 's/\/usr\/lib\/python/\/usr\/local\/lib\/python/g' ~/caffe/Makefile.config
RUN sed -i 's/\/usr\/local\/include/\/usr\/local\/include \/usr\/include\/hdf5\/serial/g' ~/caffe/Makefile.config
RUN sed -i 's/hdf5/hdf5_serial/g' ~/caffe/Makefile
RUN cd ~/caffe
RUN make -j"$(nproc)" -Wno-deprecated-gpu-targets distribute

RUN # fix ValueError caused by python-dateutil 1.x
    sed -i 's/,<2//g' ~/caffe/python/requirements.txt

RUN $PIP_INSTALL -r ~/caffe/python/requirements.txt

RUN cd ~/caffe/distribute/bin
RUN for file in *.bin; do mv "$file" "${file%%%%.bin}"; done

RUN cd ~/caffe/distribute
RUN cp -r bin include lib proto /usr/local/
RUN cp -r python/caffe /usr/local/lib/python3.6/dist-packages/

# ==================================================================
# caffe2
# ==================================================================

RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        libprotobuf-dev \
        protobuf-compiler

RUN $PIP_INSTALL \
        future \
        numpy \
        protobuf \
        enum34 \
        pyyaml \
        typing
RUN wget -O ~/caffe2.tar.xz \
        https://github.com/ufoym/prebuild/raw/caffe2/caffe2      -master-cu90-cp36-cp36m-linux_x86_64.tar.xz
RUN tar -xvf ~/caffe2.tar.xz -C /usr/local/lib

# ==================================================================
# cntk
# ==================================================================

RUN DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        openmpi-bin \
        libpng-dev \
        libtiff-dev \
        libjasper-dev
RUN wget --no-verbose -O - https://github.com/01org/mkl-dnn/releases/download/v0.14/mklml_lnx_2018.0.3.20180406.tgz | tar -xzf -
RUN cp mklml*/* /usr/local -r
RUN wget --no-verbose -O - https://github.com/01org/mkl-dnn/archive/v0.14.tar.gz | tar -xzf -
RUN cd mkl-dnn-0.14 && mkdir build && cd build
RUN ln -s /usr/local external
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          ..
RUN make -j"$(nproc)" install

RUN $PIP_INSTALL cntk-gpu

# ==================================================================
# config & cleanup
# ==================================================================

RUN ldconfig
RUN apt-get clean
RUN apt-get autoremove
RUN rm -rf /var/lib/apt/lists/* /tmp/* ~/*

EXPOSE 6006